{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","setColOne","evt","localStorage","setItem","target","value","setState","colOne","setColTwo","colTwo","render","className","state","onClick","displayShortcuts","insertCol","appendCol","resize","fullScreen","id","html","disabled","onChange","contentEditable","React","createRef","window","getItem","document","getElementById","focus","keysPressed","addEventListener","event","key","this","combined","scrollTo","scrollHeight","Component","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b597c06.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ContentEditable from \"react-contenteditable\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.contentEditable = React.createRef();\n    this.state = {\n      colOne: window.localStorage.getItem(\"colOne\") || \"\",\n      colTwo: window.localStorage.getItem(\"colTwo\") || \"\",\n      fullScreen: false,\n    };\n  }\n\n  componentDidMount() {\n    document.getElementById(\"colOne\").focus();\n\n    let keysPressed = {};\n    document.addEventListener('keydown', (event) => {\n      keysPressed[event.key] = true;\n      if (keysPressed['Control'] && keysPressed['Enter']) {\n          this.insertCol();\n      }\n      if (keysPressed['Control'] && keysPressed[`\\\\`]) {\n          this.resize();\n      }\n      if (keysPressed['Control'] && keysPressed[`/`]) {\n          this.displayShortcuts();\n      }\n      if (keysPressed['Control'] && keysPressed[`'`]) {\n          this.appendCol();\n      }\n    });\n    document.addEventListener('keyup', (event) => {\n      keysPressed={}\n    });\n  }\n  displayShortcuts() {\n    let shortcuts = `\n      Shortcuts<br/>\n      =====<br>\n      <b>Insert (add on top)</b>: control enter<br/>\n      <b>Append (add on bottom)</b>: control '<br/>\n      <b>Expand/collapse</b>: control .<br/>\n      <b>Focus right</b>: tab<br/>\n      <b>Focus left</b>: shift tab\n      ` ;\n    if (window.localStorage.getItem('colOne') === \"\") {\n      this.setState({ colOne: shortcuts });\n      document.getElementById(\"colOne\").focus()\n    }\n  }\n\n  setColOne = evt => {\n    localStorage.setItem(\"colOne\", evt.target.value);\n    this.setState({ colOne: evt.target.value });\n  };\n\n  setColTwo = evt => {\n    localStorage.setItem(\"colTwo\", evt.target.value);\n    this.setState({ colTwo: evt.target.value });\n  };\n\n  insertCol() {\n    let combined = null;\n    if (this.state.colOne === \"\") {\n      combined = `---<br/><br/>` + window.localStorage.getItem('colTwo');\n    }\n    else combined = window.localStorage.getItem('colOne') + `<br/><br/>---<br/><br/>` +  window.localStorage.getItem('colTwo');\n    return (\n      this.setState({ colTwo: combined}),\n      this.setState({ colOne: \"\"}),\n      localStorage.setItem(\"colOne\", \"\"),\n      localStorage.setItem(\"colTwo\", combined),\n      document.getElementById(\"colTwo\").scrollTo(0,0),\n      document.getElementById(\"colOne\").focus()\n    )\n  }\n  \n  appendCol() {\n    let combined = null;\n    if (this.state.colOne === \"\") {\n      combined = window.localStorage.getItem('colTwo') + `<br/><br/>---`;\n    }\n    else if (this.state.colTwo === \"\") {\n      combined = window.localStorage.getItem('colOne');\n    }\n    else combined = window.localStorage.getItem('colTwo') + `<br/>` + window.localStorage.getItem('colOne');\n    return (\n      this.setState({ colTwo: combined}),\n      this.setState({ colOne: \"\"}),\n      localStorage.setItem(\"colOne\", \"\"),\n      localStorage.setItem(\"colTwo\", combined),\n      document.getElementById(\"colTwo\").scrollTo(0, document.getElementById(\"colTwo\").scrollHeight+1000),\n      document.getElementById(\"colOne\").focus()\n    )\n  }\n\n  resize() {\n    this.setState({ fullScreen: !this.state.fullScreen});\n    document.getElementById(\"colOne\").focus()\n  }\n\n  render = () => {\n    return (\n      <div className={\"flex-col h-screen relative\"}>\n        <div className={'w-full flex justify-between bg-gray-900 h-8 noprint'}>\n          <div className={'flex'}>\n            <button\n              className={`text-xs px-2 py-1 bg-opacity-75 text-white cursor-pointer focus:outline-none hover:bg-gray-800 hover:text-gray-100 ${this.state.colOne === \"\" ? `` : `hidden`}`}\n              onClick={() => this.displayShortcuts()}>\n              Shortcuts\n              <span className={'font-mono ml-1 px-1 border border-gray-700 bg-gray-800 text-gray-200 rounded-sm'}>ctrl<span className={'pl-1'}>/</span></span>\n            </button>\n            <button\n              className={`text-xs px-2 py-1 bg-opacity-75 text-white cursor-pointer focus:outline-none hover:bg-gray-800 hover:text-gray-100 ${this.state.colOne === \"\" ? `hidden` : ``}`}\n              onClick={() => this.insertCol()}>\n              Insert\n              <span className={'font-mono ml-1 px-1 border border-gray-700 bg-gray-800 text-gray-200 rounded-sm'}>ctrl<span className={'pl-1'}>&#x21b2;</span></span>\n            </button>\n            <button\n              className={`text-xs px-2 py-1 bg-opacity-75 text-white cursor-pointer focus:outline-none hover:bg-gray-800 hover:text-gray-100 ${this.state.colOne === \"\" ? `hidden` : ` `}`}\n              onClick={() => this.appendCol()}>\n              Append\n              <span className={'font-mono ml-1 px-1 border border-gray-700 bg-gray-800 text-gray-200 rounded-sm'}>ctrl<span className={'pl-1'}>'</span></span>\n            </button>\n          </div>\n          <div className={'flex'}>\n            <button\n              className={`text-xs px-2 py-1 bg-opacity-75 text-white cursor-pointer focus:outline-none hover:bg-gray-800 hover:text-gray-100`}\n              onClick={() => this.resize()}>\n                {this.state.fullScreen ? <span>Expand</span> : <span>Collapse</span>}\n                <span className={'font-mono ml-1 px-1 border border-gray-700 bg-gray-800 text-gray-200 rounded-sm'}>ctrl<span className={'pl-1'}>\\</span></span>\n            </button>\n          </div>\n        </div>\n        <div className={`grid ${this.state.fullScreen ? `grid-cols-1` : `grid-cols-2`} bg-gray-300 bg-opacity-25 divide-x divide-gray-400`}>\n          <div className={`overflow-y-auto flex-grow-0`}>\n            <ContentEditable\n              id={\"colOne\"}\n              html={this.state.colOne}\n              disabled={false}\n              onChange={this.setColOne}\n              className={\"h-screen overflow-y-auto focus:bg-white text-sm font-mono outline-none px-4 py-12 -mt-8\"}\n            />\n          </div>\n          <div className={`overflow-y-auto flex-grow-0 ${this.state.fullScreen && `hidden`}`}>\n            <ContentEditable\n              id={\"colTwo\"}\n              html={this.state.colTwo}\n              disabled={false}\n              onChange={this.setColTwo}\n              className={\"h-screen overflow-y-auto focus:bg-white text-sm font-mono outline-none px-4 py-12 -mt-8\"}\n            />\n          </div>\n          \n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}